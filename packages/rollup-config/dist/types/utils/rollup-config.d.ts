import type { Plugin, RollupOptions } from 'rollup';
export default class RollupConfig {
    private _cjsDirectory;
    private _cjsExtension;
    private _developmentMode;
    private _developmentTSConfigPath;
    private _esmDirectory;
    private _esmExtension;
    private readonly _externalDependencies;
    private _fileName;
    private readonly _input;
    private _jsxRuntime;
    private readonly _pluginsFunctions;
    private _tsconfigPath;
    get developmentTSConfigPath(): string;
    get tsconfig(): string;
    get tsconfigPath(): string;
    private get cjsDirectory();
    private get cjsExtension();
    private get developmentMode();
    private get esmDirectory();
    private get esmExtension();
    private get externalDependencies();
    private get fileName();
    private get hasInput();
    private get input();
    private get jsxRuntime();
    private get output();
    private get outputCjs();
    private get outputEsm();
    private get plugins();
    private get tsconfigOverride();
    private get typeScriptPlugin();
    addExternalDependency: (dependency: string) => this;
    addInput: (name: string, path: string) => this;
    disableDevelopmentMode: () => this;
    disableJsxRuntime: () => this;
    enableDevelopmentMode: () => this;
    enableJsxRuntime: () => this;
    removeExternalDependency: (dependency: string) => this;
    removeInput: (name: string) => this;
    setCjsDirectory: (cjsDirectory: string | null) => this;
    setCjsExtension: (cjsExtension: string) => this;
    setDevelopmentTSConfigPath: (developmentTSConfigPath: string) => this;
    setEsmDirectory: (esmDirectory: string | null) => this;
    setEsmExtension: (esmExtension: string) => this;
    setFileName: (fileName: string) => this;
    setPlugins: (f: (plugins: readonly Readonly<Plugin>[]) => Plugin[]) => this;
    setTSConfigPath: (tsconfigPath: string) => this;
    toJSON: () => RollupOptions;
    private readonly external;
}
